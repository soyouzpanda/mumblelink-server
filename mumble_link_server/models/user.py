# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mumble_link_server.models.base_model_ import Model
from mumble_link_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, user_name=None, mute=None, deaf=None, self_mute=None, self_deaf=None, group_id=None, channel_in=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this User.  # noqa: E501
        :type user_name: str
        :param mute: The mute of this User.  # noqa: E501
        :type mute: bool
        :param deaf: The deaf of this User.  # noqa: E501
        :type deaf: bool
        :param self_mute: The self_mute of this User.  # noqa: E501
        :type self_mute: bool
        :param self_deaf: The self_deaf of this User.  # noqa: E501
        :type self_deaf: bool
        :param group_id: The group_id of this User.  # noqa: E501
        :type group_id: str
        :param channel_in: The channel_in of this User.  # noqa: E501
        :type channel_in: int
        """
        self.openapi_types = {
            'user_id': str,
            'user_name': str,
            'mute': bool,
            'deaf': bool,
            'self_mute': bool,
            'self_deaf': bool,
            'group_id': str,
            'channel_in': int
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'user_name': 'user_name',
            'mute': 'mute',
            'deaf': 'deaf',
            'self_mute': 'self_mute',
            'self_deaf': 'self_deaf',
            'group_id': 'group_id',
            'channel_in': 'channel_in'
        }

        self._user_id = user_id
        self._user_name = user_name
        self._mute = mute
        self._deaf = deaf
        self._self_mute = self_mute
        self._self_deaf = self_deaf
        self._group_id = group_id
        self._channel_in = channel_in

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this User.


        :return: The user_name of this User.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def mute(self):
        """Gets the mute of this User.


        :return: The mute of this User.
        :rtype: bool
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this User.


        :param mute: The mute of this User.
        :type mute: bool
        """
        if mute is None:
            raise ValueError("Invalid value for `mute`, must not be `None`")  # noqa: E501

        self._mute = mute

    @property
    def deaf(self):
        """Gets the deaf of this User.


        :return: The deaf of this User.
        :rtype: bool
        """
        return self._deaf

    @deaf.setter
    def deaf(self, deaf):
        """Sets the deaf of this User.


        :param deaf: The deaf of this User.
        :type deaf: bool
        """
        if deaf is None:
            raise ValueError("Invalid value for `deaf`, must not be `None`")  # noqa: E501

        self._deaf = deaf

    @property
    def self_mute(self):
        """Gets the self_mute of this User.


        :return: The self_mute of this User.
        :rtype: bool
        """
        return self._self_mute

    @self_mute.setter
    def self_mute(self, self_mute):
        """Sets the self_mute of this User.


        :param self_mute: The self_mute of this User.
        :type self_mute: bool
        """
        if self_mute is None:
            raise ValueError("Invalid value for `self_mute`, must not be `None`")  # noqa: E501

        self._self_mute = self_mute

    @property
    def self_deaf(self):
        """Gets the self_deaf of this User.


        :return: The self_deaf of this User.
        :rtype: bool
        """
        return self._self_deaf

    @self_deaf.setter
    def self_deaf(self, self_deaf):
        """Sets the self_deaf of this User.


        :param self_deaf: The self_deaf of this User.
        :type self_deaf: bool
        """
        if self_deaf is None:
            raise ValueError("Invalid value for `self_deaf`, must not be `None`")  # noqa: E501

        self._self_deaf = self_deaf

    @property
    def group_id(self):
        """Gets the group_id of this User.


        :return: The group_id of this User.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this User.


        :param group_id: The group_id of this User.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def channel_in(self):
        """Gets the channel_in of this User.


        :return: The channel_in of this User.
        :rtype: int
        """
        return self._channel_in

    @channel_in.setter
    def channel_in(self, channel_in):
        """Sets the channel_in of this User.


        :param channel_in: The channel_in of this User.
        :type channel_in: int
        """
        if channel_in is None:
            raise ValueError("Invalid value for `channel_in`, must not be `None`")  # noqa: E501

        self._channel_in = channel_in

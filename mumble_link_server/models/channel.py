# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mumble_link_server.models.base_model_ import Model
from mumble_link_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id=None, channel_name=None, parent=None, children=None, users_in=None):  # noqa: E501
        """Channel - a model defined in OpenAPI

        :param channel_id: The channel_id of this Channel.  # noqa: E501
        :type channel_id: int
        :param channel_name: The channel_name of this Channel.  # noqa: E501
        :type channel_name: str
        :param parent: The parent of this Channel.  # noqa: E501
        :type parent: str
        :param children: The children of this Channel.  # noqa: E501
        :type children: List[int]
        :param users_in: The users_in of this Channel.  # noqa: E501
        :type users_in: List[int]
        """
        self.openapi_types = {
            'channel_id': int,
            'channel_name': str,
            'parent': str,
            'children': List[int],
            'users_in': List[int]
        }

        self.attribute_map = {
            'channel_id': 'channel_id',
            'channel_name': 'channel_name',
            'parent': 'parent',
            'children': 'children',
            'users_in': 'users_in'
        }

        self._channel_id = channel_id
        self._channel_name = channel_name
        self._parent = parent
        self._children = children
        self._users_in = users_in

    @classmethod
    def from_dict(cls, dikt) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Channel of this Channel.  # noqa: E501
        :rtype: Channel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this Channel.


        :return: The channel_id of this Channel.
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Channel.


        :param channel_id: The channel_id of this Channel.
        :type channel_id: int
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def channel_name(self):
        """Gets the channel_name of this Channel.


        :return: The channel_name of this Channel.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this Channel.


        :param channel_name: The channel_name of this Channel.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")  # noqa: E501

        self._channel_name = channel_name

    @property
    def parent(self):
        """Gets the parent of this Channel.


        :return: The parent of this Channel.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Channel.


        :param parent: The parent of this Channel.
        :type parent: str
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this Channel.


        :return: The children of this Channel.
        :rtype: List[int]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Channel.


        :param children: The children of this Channel.
        :type children: List[int]
        """

        self._children = children

    @property
    def users_in(self):
        """Gets the users_in of this Channel.


        :return: The users_in of this Channel.
        :rtype: List[int]
        """
        return self._users_in

    @users_in.setter
    def users_in(self, users_in):
        """Sets the users_in of this Channel.


        :param users_in: The users_in of this Channel.
        :type users_in: List[int]
        """

        self._users_in = users_in

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mumble_link_server.models.base_model_ import Model
from mumble_link_server import util


class Ban(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name=None, ip=None, reason=None, start=None, duration=None):  # noqa: E501
        """Ban - a model defined in OpenAPI

        :param user_name: The user_name of this Ban.  # noqa: E501
        :type user_name: str
        :param ip: The ip of this Ban.  # noqa: E501
        :type ip: str
        :param reason: The reason of this Ban.  # noqa: E501
        :type reason: str
        :param start: The start of this Ban.  # noqa: E501
        :type start: int
        :param duration: The duration of this Ban.  # noqa: E501
        :type duration: int
        """
        self.openapi_types = {
            'user_name': str,
            'ip': str,
            'reason': str,
            'start': int,
            'duration': int
        }

        self.attribute_map = {
            'user_name': 'user_name',
            'ip': 'ip',
            'reason': 'reason',
            'start': 'start',
            'duration': 'duration'
        }

        self._user_name = user_name
        self._ip = ip
        self._reason = reason
        self._start = start
        self._duration = duration

    @classmethod
    def from_dict(cls, dikt) -> 'Ban':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ban of this Ban.  # noqa: E501
        :rtype: Ban
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self):
        """Gets the user_name of this Ban.


        :return: The user_name of this Ban.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Ban.


        :param user_name: The user_name of this Ban.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def ip(self):
        """Gets the ip of this Ban.


        :return: The ip of this Ban.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Ban.


        :param ip: The ip of this Ban.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def reason(self):
        """Gets the reason of this Ban.


        :return: The reason of this Ban.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Ban.


        :param reason: The reason of this Ban.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def start(self):
        """Gets the start of this Ban.


        :return: The start of this Ban.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Ban.


        :param start: The start of this Ban.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this Ban.


        :return: The duration of this Ban.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Ban.


        :param duration: The duration of this Ban.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

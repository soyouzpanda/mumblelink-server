# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mumble_link_server.models.base_model_ import Model
from mumble_link_server import util


class ServerInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_id=None, server_name=None, max_users=None, connected_users=None):  # noqa: E501
        """ServerInfo - a model defined in OpenAPI

        :param server_id: The server_id of this ServerInfo.  # noqa: E501
        :type server_id: str
        :param server_name: The server_name of this ServerInfo.  # noqa: E501
        :type server_name: str
        :param max_users: The max_users of this ServerInfo.  # noqa: E501
        :type max_users: int
        :param connected_users: The connected_users of this ServerInfo.  # noqa: E501
        :type connected_users: int
        """
        self.openapi_types = {
            'server_id': str,
            'server_name': str,
            'max_users': int,
            'connected_users': int
        }

        self.attribute_map = {
            'server_id': 'server_id',
            'server_name': 'server_name',
            'max_users': 'max_users',
            'connected_users': 'connected_users'
        }

        self._server_id = server_id
        self._server_name = server_name
        self._max_users = max_users
        self._connected_users = connected_users

    @classmethod
    def from_dict(cls, dikt) -> 'ServerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServerInfo of this ServerInfo.  # noqa: E501
        :rtype: ServerInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_id(self):
        """Gets the server_id of this ServerInfo.


        :return: The server_id of this ServerInfo.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this ServerInfo.


        :param server_id: The server_id of this ServerInfo.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def server_name(self):
        """Gets the server_name of this ServerInfo.


        :return: The server_name of this ServerInfo.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ServerInfo.


        :param server_name: The server_name of this ServerInfo.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def max_users(self):
        """Gets the max_users of this ServerInfo.


        :return: The max_users of this ServerInfo.
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this ServerInfo.


        :param max_users: The max_users of this ServerInfo.
        :type max_users: int
        """

        self._max_users = max_users

    @property
    def connected_users(self):
        """Gets the connected_users of this ServerInfo.


        :return: The connected_users of this ServerInfo.
        :rtype: int
        """
        return self._connected_users

    @connected_users.setter
    def connected_users(self, connected_users):
        """Sets the connected_users of this ServerInfo.


        :param connected_users: The connected_users of this ServerInfo.
        :type connected_users: int
        """

        self._connected_users = connected_users
